- Always use command for PowerShell. if computer is window
- When chat, try to save token as much as posible
- If code relate to ReactJs, can read file .cursor\rules\rule-reactjs15
- If code relate to Tailwing, can read file .cursor\rules\rule-tailwing
- Use the best AI suitable for the task

## ü§ñ AI Task Workflow Rules

### MANDATORY Task Reading Protocol
- **BEFORE any development work**: When given a task ID (e.g., "Task 1.1", "1.2", "Task 2.3"), you MUST:'
IMPORTANT: Must read @project-goal.md to understand the project. 
  1. Read the specific task details from @family-tree/docs/task-tracking.md and @family-tree/docs/completed-tasks.md
  2. Locate the exact task by ID and understand: Description, Status, Agent, Issues/Blockers, Notes
  3. Verify task dependencies and prerequisites are met
  4. Read the  @family-tree\docs\project-overview.md and @family-tree\docs\success-criteria.md
  4. Only proceed with implementation after confirming task understanding

## 2Ô∏è‚É£ GIT WORKFLOW - MANDATORY
- **BEFORE coding**: `git checkout main` ‚Üí `git pull` ‚Üí `git checkout -b task{ID}-{description}`
- **DURING**: Commit with format: `type(scope): description`
- **AFTER**: Final push ‚Üí Create PR with task details and test results

### MANDATORY Testing Protocol
- **BEFORE starting development**:
  1. Run all existing tests to establish baseline: `npm test`
  2. Write unit tests for the feature/component to be implemented following TDD principles
  3. Verify tests fail appropriately (red phase of TDD)
- **DURING development**:
  1. Implement the minimum code required to make tests pass (green phase of TDD)
  2. Refactor while keeping tests passing (refactor phase of TDD)
  3. Run tests frequently to ensure no regressions
- **AFTER implementation**:
  1. Run all tests to ensure no regressions: `npm test`
  2. Add any additional edge case tests if necessary
  3. Document test coverage with `npm test -- --coverage`

### MANDATORY Task Update Protocol  
- **AFTER completing any task implementation**: You MUST:
  1. Update task status in @family-tree/docs/task-tracking.md (Pending ‚Üí In Progress ‚Üí Completed)
  2. Move completed tasks to @family-tree/docs/completed-tasks.md with implementation notes
  3. Document any issues encountered or deviations from plan
  4. Update task completion log section
  5. Mark any dependent tasks as ready if applicable
  6. Update @memory-bank/progress.md with latest achievements

### Context7 Integration
- When working on technical implementations, use "use context7" for up-to-date documentation
- For Next.js, TypeScript, Tailwind, JWT implementations, always reference latest Context7 docs
- Include Context7 library IDs in prompts when known (e.g., /vercel/next.js)

### Task Status Values
- **Pending**: Not yet started  
- **In Progress**: Currently being worked on
- **Completed**: Finished successfully  
- **Blocked**: Unable to proceed due to external factors
- **Error**: Task failed with issues that need resolution


### Reference Information

#### Git Branch Naming
- **Format**: `task{ID}-{kebab-case-description}`
- **Examples**: `task1-1-setup-nextjs-project`, `task2-3-jwt-token-system`

#### Documentation Structure
- **Project Documentation**: Located in @family-tree/docs/ directory
- **Memory Bank**: Located in @memory-bank/ directory

### Example Task Reference Format
When referencing tasks, use format: "Task [ID] - [Title]" (e.g., "Task 1.1 - Setup Next.js Project")

### Documentation Structure
- **Project Documentation**: Located in @family-tree/docs/ directory
  - index.md - Main documentation hub
  - project-overview.md - Project summary, tech stack, and architecture
  - task-tracking.md - Current tasks and their status
  - completed-tasks.md - Archive of finished tasks with implementation notes
  - implementation-notes.md - Technical implementation details and code examples
    - Unit Testing Guidelines - Setup and examples for Jest and React Testing Library
  - success-criteria.md - Project goals and metrics for success