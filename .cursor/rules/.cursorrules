---
description: "Core rules for AI agent interaction, including task workflow, Git procedures, testing protocols, and documentation standards."
globs: ["**/*"]
alwaysApply: true
---

## ðŸ¤– AI Task Workflow

### 1. Project Understanding (Mandatory)
Before starting any task, you MUST read and understand the following documents to grasp the project's goals, scope, and current state.

- **Project Goal**: [project-goal.md](mdc:project-goal.md)
- **Project Overview**: [project-overview.md](mdc:family-tree/docs/project-overview.md)
- **Success Criteria**: [success-criteria.md](mdc:family-tree/docs/success-criteria.md)

### 2. Task-Specific Instructions (Mandatory)
For any given task ID (e.g., "Task 1.1", "1.2"), you MUST:
1.  Read the main task board to find the specific task:
    - [task-tracking.md](mdc:family-tree/docs/task-tracking.md)
2.  Review the archive of completed work for relevant context:
    - [completed-tasks.md](mdc:family-tree/docs/completed-tasks.md)
3.  For the specific task, understand its:
    - Description
    - Status
    - Dependencies and prerequisites
    - Known issues or blockers
    - Any associated notes
4.  Only proceed with implementation after you have a clear understanding of the task.

### 3. Task Status Updates (Mandatory)
After completing any task, you MUST perform the following actions in sequence:
1.  Update the task's status in [task-tracking.md](mdc:family-tree/docs/task-tracking.md).
2.  Move the completed task details to [completed-tasks.md](mdc:family-tree/docs/completed-tasks.md), including any implementation notes.
3.  Document any issues encountered or deviations from the original plan.
4.  Update the [progress.md](mdc:memory-bank/progress.md) in the Memory Bank with your latest achievements.
5.  After all documentation is updated, you may proceed with the Git workflow (commit, push, etc.).

---

## ðŸ’» Development Workflow

### Git Workflow (Mandatory)
1.  **Create a Branch**: Before writing any code, use the `new-task-branch.ps1` script to create a feature branch.
    - **Example**: `.\scripts\new-task-branch.ps1 -TaskID "1.1" -Description "setup-nextjs-project"`
2.  **Commit Changes**: Write clear and concise commit messages.
    - **Format**: `type(scope): description`
    - **Example**: `feat(auth): implement jwt token generation`
3.  **Create a Pull Request**: After pushing your changes, create a PR. The description should include task details and test results.

### Testing Protocol (Mandatory)
Follow a Test-Driven Development (TDD) approach.

1.  **Before Coding**:
    - Run all existing tests to establish a baseline: `npm test`
    - Write new unit tests for the feature you are about to build.
    - Confirm that the new tests fail as expected (Red).
2.  **During Coding**:
    - Write the minimum amount of code required to make the new tests pass (Green).
    - Refactor your code for clarity and efficiency while ensuring all tests continue to pass (Refactor).
    - Run tests frequently.
3.  **After Coding**:
    - Run the entire test suite to ensure no regressions: `npm test`
    - Add tests for any edge cases you discovered.
    - Check test coverage: `npm test -- --coverage`

---

## ðŸ“š Reference Information

### Context7 Integration
- When you need up-to-date documentation for technical implementations (e.g., Next.js, TypeScript, Tailwind, JWT), you should use your `Context7` tools.
- If you know the library ID, include it in your requests (e.g., /vercel/next.js).

### Task Status Values
- `Pending`: Not yet started.
- `In Progress`: Currently being worked on.
- `Completed`: Finished successfully.
- `Blocked`: Unable to proceed.
- `Error`: Task failed and needs resolution.

### Naming and Referencing
- **Git Branch Name Format**: `task{ID}-{kebab-case-description}`
  - *Example*: `task1-1-setup-nextjs-project`
- **Task Reference Format**: "Task [ID] - [Title]"
  - *Example*: "Task 1.1 - Setup Next.js Project"

### Documentation Structure
- **Project Documentation**: [family-tree/docs/](mdc:family-tree/docs/)
  - [index.md](mdc:family-tree/docs/index.md): Main documentation hub.
  - [project-overview.md](mdc:family-tree/docs/project-overview.md): Project summary, tech stack, and architecture.
  - [task-tracking.md](mdc:family-tree/docs/task-tracking.md): Current tasks and their status.
  - [completed-tasks.md](mdc:family-tree/docs/completed-tasks.md): Archive of finished tasks with implementation notes.
  - [implementation-notes.md](mdc:family-tree/docs/implementation-notes.md): Technical implementation details.
  - [success-criteria.md](mdc:family-tree/docs/success-criteria.md): Project goals and metrics for success.
- **Memory Bank**: [memory-bank/](mdc:memory-bank/)

### General Guidelines
- **Shell**: Always use PowerShell commands, as the environment is Windows.
- **Token Efficiency**: Be concise in your communication to conserve tokens.
- **Tool Selection**: Use the most appropriate AI model/tool for the task at hand.
- **Additional Rules**:
  - For ReactJS work, consult `rule-reactjs15`.
  - For Tailwind CSS, consult `rule-tailwing`.
